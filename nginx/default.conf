    # Redirect HTTP to HTTPS for battlestack.me
    server {
        listen 80;
        server_name battlestack.me www.battlestack.me;

        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }

        location / {
            return 301 https://$host$request_uri;
        }
    }

    # --- СЕРВЕР ДЛЯ ЛОКАЛЬНОЙ РАЗРАБОТКИ (HTTP) ---
    # Он будет использоваться, когда вы работаете на localhost.
    server {
        listen 80 default_server;
        server_name localhost;

        # Блокируем User-Agents типа curl/wget
        if ($http_user_agent ~* (curl|wget|httpie|python-requests)) {
            return 403;
        }

        # --- Прокси для API ---
        # Все запросы к API теперь идут через единый стандарт /api/v1/

        # Auth Service - Specific endpoints for stricter rate limiting
        location /api/v1/auth/token {
            proxy_pass http://auth-service:8000/api/v1/auth/token;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /api/v1/auth/register {
            proxy_pass http://auth-service:8000/api/v1/auth/register;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Auth Service - General routes
        location /api/v1/auth/ {
            proxy_pass http://auth-service:8000/api/v1/auth/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Admin API (from auth-service, not problems-service)
        location /api/v1/admin/ {
            proxy_pass http://auth-service:8000/api/v1/admin/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # User Service
        location /api/v1/users/ {
            proxy_pass http://user-service:8000/api/v1/users/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }


        # Problems Service (код выполнения и задачи) - направляем на duels-service
        location /api/v1/problems/ {
            proxy_pass http://duels-service:8000/api/v1/problems/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Duels Service (включая leaderboard)
        # Запросы на /api/v1/duels/leaderboard теперь будут правильно обрабатываться.
        location /api/v1/duels/ {
            proxy_pass http://duels-service:8000/api/v1/duels/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # WebSocket для Duels Service
        location /api/v1/duels/ws/ {
            proxy_pass http://duels-service:8000/api/v1/duels/ws/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # --- Прокси для Frontend ---
        # Все остальные запросы отправляются на фронтенд
        location / {
            proxy_pass http://frontend; # Docker сам разрешит это имя в IP-адрес
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Prevent serving of hidden files
        location ~ /\. {
            deny all;
        }
    }

    # --- СЕРВЕР ДЛЯ ПРОДАКШЕНА (HTTPS) ---
    # Этот блок закомментирован. Раскомментируйте его, когда будете готовы.
    # Он является копией верхнего блока, но с SSL.

    # server {
    #     listen 443 ssl http2;
    #     listen [::]:443 ssl http2;
    #     server_name battlestack.me www.battlestack.me;

    #     # SSL Сертификаты
    #     ssl_certificate /etc/letsencrypt/live/battlestack.me/fullchain.pem;
    #     ssl_certificate_key /etc/letsencrypt/live/battlestack.me/privkey.pem;

    #     ssl_protocols TLSv1.2 TLSv1.3;
    #     ssl_ciphers HIGH:!aNULL:!MD5;
        
    #     # Headers
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     add_header Cross-Origin-Opener-Policy "same-origin-allow-popups";

    #     # Все location блоки ниже - это копия из localhost, начинаются с /api/v1/..., что упрощает разработку и поддержку.
    #     # Правила они будут работать

    #     location /api/v1/auth/ {
    #         proxy_pass http://auth-service:8000/api/v1/auth/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     location /api/v1/admin/ {
    #         proxy_pass http://auth-service:8000/api/v1/admin/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     location /api/v1/users/ {
    #         proxy_pass http://user-service:8000/api/v1/users/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     location /api/v1/problems/ {
    #         proxy_pass http://problems-service:8000/api/v1/problems/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }

    #     location /api/v1/duels/ {
    #         proxy_pass http://duels-service:8000/api/v1/duels/;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
        
    #     location /ws/ {
    #         proxy_pass http://duels-service:8000/ws/;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #     }

    #     location / {
    #         proxy_pass http://frontend;
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #         proxy_set_header X-Forwarded-Proto $scheme;
    #     }
    # }
