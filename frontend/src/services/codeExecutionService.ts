/**
 * üöÄ CODE EXECUTION SERVICE
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
 */

// üé® –¢–∏–ø—ã –¥–ª—è —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
export interface SupportedLanguage {
  id: string;
  name: string;
  extension: string;
  supports_classes: boolean;
}

export interface LanguagesResponse {
  supported_languages: SupportedLanguage[];
}

// üé® –¢–∏–ø—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–¥–∞
export interface CodeTemplatesResponse {
  problem_slug: string;
  function_name: string;
  templates: Record<string, string>;
  supported_languages: string[];
}

export interface ExampleTemplatesResponse {
  problem: string;
  description: string;
  templates: Record<string, string>;
  example_usage: {
    input: string;
    output: string;
  };
}

// üèÜ –¢–∏–ø—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏–π
export interface SubmissionRequest {
  code: string;
  language: string;
}

export interface SubmissionResponse {
  submission_id: string | null;
  status: string;
  passed_tests: number;
  total_tests: number;
  execution_time: string;
  memory_usage: string;
  score: number;
  error_message: string;
  accepted: boolean;
}

// üß™ –¢–∏–ø—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
export interface TestCaseResult {
  test_case_index: number;
  passed: boolean;
  input_data: any;
  expected_output: any;
  actual_output: any;
  execution_time: number;
  error_message?: string;
  hidden: boolean;
}

export interface CodeRunResult {
  success: boolean;
  results: TestCaseResult[];
  runtime_ms: number;
  memory_mb: number;
  error?: string;
}

/**
 * üéØ –û–°–ù–û–í–ù–û–ô –ö–õ–ê–°–° –°–ï–†–í–ò–°–ê
 */
export class CodeExecutionService {
  private baseUrl = 'http://localhost:8003/api/v1/problems';

  /**
   * üìã –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async getSupportedLanguages(): Promise<SupportedLanguage[]> {
    try {
      const response = await fetch(`${this.baseUrl}/languages`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const data: LanguagesResponse = await response.json();
      return data.supported_languages;
    } catch (error) {
      console.error('Failed to fetch supported languages:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤
      return this.getFallbackLanguages();
    }
  }

  /**
   * üé® –ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –∫–æ–¥–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏
   */
  async getCodeTemplates(problemSlug: string, authToken?: string): Promise<CodeTemplatesResponse | null> {
    try {
      const headers: Record<string, string> = {
        'Content-Type': 'application/json',
      };
      
      if (authToken) {
        headers['Authorization'] = `Bearer ${authToken}`;
      }

      const response = await fetch(`${this.baseUrl}/templates/${problemSlug}`, {
        headers,
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Authentication required');
        }
        if (response.status === 404) {
          throw new Error('Problem not found');
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Failed to fetch code templates:', error);
      return null;
    }
  }

  /**
   * üé® –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ –∫–æ–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
   */
  async getExampleTemplates(): Promise<ExampleTemplatesResponse | null> {
    try {
      const response = await fetch(`${this.baseUrl}/examples/templates`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      return await response.json();
    } catch (error) {
      console.error('Failed to fetch example templates:', error);
      return null;
    }
  }

  /**
   * üèÜ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
   */
  async submitSolution(
    problemSlug: string,
    submissionData: SubmissionRequest,
    authToken: string
  ): Promise<SubmissionResponse> {
    try {
      const response = await fetch(`${this.baseUrl}/submit/${problemSlug}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`,
        },
        body: JSON.stringify(submissionData),
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Authentication required');
        }
        if (response.status === 404) {
          throw new Error('Problem not found');
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Failed to submit solution:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
      return {
        submission_id: null,
        status: 'Internal Error',
        passed_tests: 0,
        total_tests: 0,
        execution_time: '0.000s',
        memory_usage: '0KB',
        score: 0.0,
        error_message: error instanceof Error ? error.message : 'Unknown error',
        accepted: false,
      };
    }
  }

  /**
   * üß™ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
   */
  async runCode(
    problemSlug: string,
    submissionData: SubmissionRequest,
    authToken: string
  ): Promise<CodeRunResult | null> {
    try {
      const response = await fetch(`${this.baseUrl}/${problemSlug}/run`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${authToken}`,
        },
        body: JSON.stringify(submissionData),
      });

      if (!response.ok) {
        if (response.status === 401) {
          throw new Error('Authentication required');
        }
        if (response.status === 404) {
          throw new Error('Problem not found');
        }
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Failed to run code:', error);
      return null;
    }
  }

  /**
   * üéØ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ —Ü–≤–µ—Ç—É
   */
  getStatusColor(status: string): string {
    switch (status.toLowerCase()) {
      case 'accepted':
        return 'text-green-600';
      case 'wrong answer':
        return 'text-red-600';
      case 'time limit exceeded':
        return 'text-yellow-600';
      case 'memory limit exceeded':
        return 'text-orange-600';
      case 'runtime error':
        return 'text-purple-600';
      case 'compilation error':
        return 'text-pink-600';
      default:
        return 'text-gray-600';
    }
  }

  /**
   * üéØ –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
   */
  getStatusIcon(status: string): string {
    switch (status.toLowerCase()) {
      case 'accepted':
        return '‚úÖ';
      case 'wrong answer':
        return '‚ùå';
      case 'time limit exceeded':
        return '‚è∞';
      case 'memory limit exceeded':
        return 'üß†';
      case 'runtime error':
        return 'üí•';
      case 'compilation error':
        return 'üîß';
      default:
        return '‚ùì';
    }
  }

  /**
   * üìã Fallback —Å–ø–∏—Å–æ–∫ —è–∑—ã–∫–æ–≤ –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–∫–∏ API
   */
  private getFallbackLanguages(): SupportedLanguage[] {
    return [
      { id: 'python', name: 'Python', extension: '.py', supports_classes: true },
      { id: 'java', name: 'Java', extension: '.java', supports_classes: true },
      { id: 'cpp', name: 'C++', extension: '.cpp', supports_classes: true },
      { id: 'javascript', name: 'JavaScript', extension: '.js', supports_classes: false },
      { id: 'typescript', name: 'TypeScript', extension: '.ts', supports_classes: false },
      { id: 'go', name: 'Go', extension: '.go', supports_classes: false },
      { id: 'rust', name: 'Rust', extension: '.rs', supports_classes: true },
      { id: 'c', name: 'C', extension: '.c', supports_classes: false },
    ];
  }

  /**
   * üé® –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Monaco Editor –¥–ª—è —è–∑—ã–∫–∞
   */
  getMonacoLanguage(languageId: string): string {
    const mapping: Record<string, string> = {
      'python': 'python',
      'python3': 'python',
      'java': 'java',
      'cpp': 'cpp',
      'c': 'c',
      'javascript': 'javascript',
      'typescript': 'typescript',
      'go': 'go',
      'rust': 'rust',
    };
    return mapping[languageId] || 'plaintext';
  }

  /**
   * üé® –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—É –¥–ª—è —è–∑—ã–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  getLanguageTheme(): string {
    // Return a default theme since we're not using language-specific themes
    return 'vs-dark';
  }
}

// üåü –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const codeExecutionService = new CodeExecutionService(); 