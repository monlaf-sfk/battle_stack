/**
 * üöÄ CODE EXECUTION PANEL
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –≤ —Å—Ç–∏–ª–µ LeetCode
 * –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è "–≥–ª—É–ø—ã–º" –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–ª–±—ç–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å—ã.
 * –û–Ω –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ –∫–æ–¥–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è/–æ—Ç–ø—Ä–∞–≤–∫–∏.
 */

import React, { useState, useEffect, useRef } from 'react';
import Editor from '@monaco-editor/react';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
import type { Problem, DuelProblem, Language, SubmissionResponse } from '../../types/duel.types';
import SubmissionResult from './SubmissionResult'; // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ SubmissionResultProps –ø—Ä–∏–Ω–∏–º–∞–µ—Ç testResults

interface CodeExecutionPanelProps {
  // `problem` —Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–ø—Å, —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
  problem: Problem | DuelProblem | null;
  // `onCodeChange` –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∫–æ–¥–µ
  onCodeChange: (code: string) => void;
  // `initialCode` –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
  initialCode?: string;
  // `isSubmitting` –∏ `isRunningTests` –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ UI
  isSubmitting: boolean;
  isRunningTests: boolean;
  // `submissionResult` –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ—à–µ–Ω–∏—è
  submissionResult: SubmissionResponse | null;
  // `selectedLanguage` –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ –ø—Ä–æ–ø—Å, —Ç–∞–∫ –∫–∞–∫ —è–∑—ã–∫ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª–µ–º
  selectedLanguage: Language;
  // `onLanguageChange` –∑–¥–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –ª–æ–≥–∏–∫–∏, –Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
  onLanguageChange: (language: Language) => void; 
  // `className` –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
  className?: string;
}

const CodeExecutionPanel: React.FC<CodeExecutionPanelProps> = ({
  onCodeChange,
  initialCode = '',
  isSubmitting,
  isRunningTests,
  submissionResult,
  selectedLanguage, // –ü—Ä–∏–Ω–∏–º–∞–µ–º, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ Monaco Editor –Ω–∞–ø—Ä—è–º—É—é –∑–¥–µ—Å—å
  className = '', 
}) => {
  
  const editorRef = useRef<any>(null);
  
  // –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–æ–¥–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞
  const [code, setCode] = useState(initialCode);
  
  useEffect(() => {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞, –µ—Å–ª–∏ initialCode –∏–∑–º–µ–Ω–∏–ª—Å—è
    if (initialCode !== code) {
      setCode(initialCode);
    }
  }, [initialCode, code]);

  const handleEditorDidMount = (editor: any) => {
    editorRef.current = editor;
    editor.updateOptions({
      fontSize: 14,
      minimap: { enabled: false },
      scrollBeyondLastLine: false,
      wordWrap: 'on',
      lineNumbers: 'on',
    });
  };

  const handleEditorChange = (value: string | undefined) => {
    const newCode = value || '';
    setCode(newCode);
    // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –∫–æ–¥–∞
    if (onCodeChange) {
      onCodeChange(newCode);
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –¥–ª—è Monaco Editor –Ω–∞ –æ—Å–Ω–æ–≤–µ `selectedLanguage` –ø—Ä–æ–ø—Å–∞
  const getMonacoLanguage = (language: Language) => {
    switch (language) {
      case 'python':
        return 'python';
      case 'javascript':
        return 'javascript';
      case 'java':
        return 'java';
      case 'cpp':
        return 'cpp';
      default:
        return 'plaintext'; // Fallback for unsupported languages
    }
  };

  return (
    <div className={`flex flex-col h-full bg-gray-900 rounded-lg border border-gray-700 overflow-hidden ${className}`}>
      {/* Editor Area */}
      <div className="flex-grow relative">
        <Editor
          height="100%"
          language={getMonacoLanguage(selectedLanguage)} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å selectedLanguage
          theme="vs-dark"
          value={code}
          onChange={handleEditorChange}
          onMount={handleEditorDidMount}
          options={{
            minimap: { enabled: false },
            fontSize: 14,
            scrollBeyondLastLine: false,
            automaticLayout: true,
          }}
        />
      </div>

      {/* Console Area */}
      <div className="flex-shrink-0 h-1/3 border-t-2 border-gray-700 flex flex-col">
        {/* Console Header */}
        <div className="bg-arena-surface/40 p-4 rounded-t-lg relative">
          <div className="font-mono text-sm text-arena-text-dim mb-2 flex justify-between items-center">
            <span>CONSOLE OUTPUT</span>
            {(submissionResult && submissionResult.passed !== undefined && submissionResult.total !== undefined) && (
              <span className="text-xs text-arena-text-muted">
                {submissionResult.passed} / {submissionResult.total} tests passed
              </span>
            )}
          </div>
        </div>
        {/* Console Output */}
        <div className="p-4 overflow-auto flex-grow bg-gray-800/50">
          <SubmissionResult 
            result={submissionResult} // –ü–µ—Ä–µ–¥–∞–µ–º submissionResult –ø—Ä–æ–ø—Å
            isLoading={isSubmitting || isRunningTests} // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–ø—Å—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
          />
        </div>
      </div>
    </div>
  );
};

export default CodeExecutionPanel;