"""
üîí SECURITY MODULE FOR CODE EXECUTION
–ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
"""

import os
import re
import hashlib
import tempfile
import shutil
from typing import List, Dict, Any, Optional
from pathlib import Path
import asyncio
import subprocess
import time
import json
from dataclasses import dataclass
from enum import Enum

class SecurityLevel(str, Enum):
    """üõ°Ô∏è –£—Ä–æ–≤–Ω–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    DEVELOPMENT = "development"  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    TESTING = "testing"          # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    PRODUCTION = "production"    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è production

@dataclass
class SecurityLimits:
    """‚öôÔ∏è –õ–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    max_file_size_kb: int = 100        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∫–æ–¥–∞
    max_execution_time_s: int = 5       # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    max_memory_mb: int = 256            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø–∞–º—è—Ç—å
    max_output_size_kb: int = 1024      # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤—ã–≤–æ–¥–∞
    max_files_count: int = 10           # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤
    max_processes: int = 1              # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    allowed_network: bool = False       # –†–∞–∑—Ä–µ—à—ë–Ω –ª–∏ —Å–µ—Ç–µ–≤–æ–π –¥–æ—Å—Ç—É–ø
    allowed_file_operations: bool = False  # –†–∞–∑—Ä–µ—à–µ–Ω—ã –ª–∏ —Ñ–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏

class CodeSecurityValidator:
    """üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞"""
    
    def __init__(self, security_level: SecurityLevel = SecurityLevel.PRODUCTION):
        self.security_level = security_level
        self.limits = self._get_security_limits()
        
        # üö´ –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
        self.forbidden_patterns = {
            "python": [
                r"import\s+os",
                r"import\s+sys",
                r"import\s+subprocess",
                r"import\s+socket",
                r"import\s+urllib",
                r"import\s+requests",
                r"import\s+http",
                r"from\s+os\s+import",
                r"from\s+sys\s+import",
                r"from\s+subprocess\s+import",
                r"__import__\s*\(",
                r"eval\s*\(",
                r"exec\s*\(",
                r"compile\s*\(",
                r"open\s*\(",
                r"file\s*\(",
                r"input\s*\(",
                r"raw_input\s*\(",
                r"quit\s*\(",
                r"exit\s*\(",
                r"globals\s*\(",
                r"locals\s*\(",
                r"vars\s*\(",
                r"dir\s*\(",
                r"delattr\s*\(",
                r"getattr\s*\(",
                r"setattr\s*\(",
                r"hasattr\s*\(",
                r"reload\s*\(",
                r"while\s+True\s*:",  # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
                r"for\s+.*\s+in\s+range\s*\(\s*\d{6,}\s*\)",  # –ë–æ–ª—å—à–∏–µ —Ü–∏–∫–ª—ã
            ],
            "java": [
                r"import\s+java\.io",
                r"import\s+java\.net",
                r"import\s+java\.lang\.Runtime",
                r"import\s+java\.lang\.Process",
                r"Runtime\.getRuntime\(\)",
                r"ProcessBuilder",
                r"System\.exit\(",
                r"System\.gc\(",
                r"Thread\.sleep\(",
                r"new\s+Thread\(",
                r"\.exec\s*\(",
                r"Scanner\s*\(",
                r"System\.in",
                r"while\s*\(\s*true\s*\)",  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
                r"for\s*\(.*;\s*;\s*.*\)",   # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
            ],
            "cpp": [
                r"#include\s*<\s*cstdlib\s*>",
                r"#include\s*<\s*system\s*>",
                r"#include\s*<\s*unistd\.h\s*>",
                r"#include\s*<\s*sys/.*\s*>",
                r"#include\s*<\s*windows\.h\s*>",
                r"system\s*\(",
                r"exec\w*\s*\(",
                r"fork\s*\(",
                r"pthread_create",
                r"std::system",
                r"std::thread",
                r"fopen\s*\(",
                r"freopen\s*\(",
                r"remove\s*\(",
                r"rename\s*\(",
                r"while\s*\(\s*true\s*\)",  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
                r"for\s*\(\s*;\s*;\s*\)",    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
            ],
            "javascript": [
                r"require\s*\(",
                r"import\s+.*\s+from\s+['\"][^'\"]*fs['\"]",
                r"import\s+.*\s+from\s+['\"][^'\"]*child_process['\"]",
                r"import\s+.*\s+from\s+['\"][^'\"]*net['\"]",
                r"import\s+.*\s+from\s+['\"][^'\"]*http['\"]",
                r"eval\s*\(",
                r"Function\s*\(",
                r"setTimeout\s*\(",
                r"setInterval\s*\(",
                r"XMLHttpRequest",
                r"fetch\s*\(",
                r"process\.",
                r"global\.",
                r"__dirname",
                r"__filename",
                r"while\s*\(\s*true\s*\)",  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
            ],
            "go": [
                r"import\s+\"os\"",
                r"import\s+\"os/exec\"",
                r"import\s+\"net\"",
                r"import\s+\"net/http\"",
                r"import\s+\"syscall\"",
                r"exec\.Command",
                r"os\.Exit",
                r"os\.Getenv",
                r"os\.Setenv",
                r"runtime\.GC",
                r"for\s*\{\s*\}",  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ —Ü–∏–∫–ª—ã
                r"for\s+;\s*;\s*\{",
            ]
        }
        
        # üîç –†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —è–∑—ã–∫–∞
        self.allowed_imports = {
            "python": [
                "math", "random", "itertools", "functools", "collections", 
                "heapq", "bisect", "string", "re", "datetime", "decimal",
                "fractions", "statistics", "json", "copy", "typing"
            ],
            "java": [
                "java.util.*", "java.math.*", "java.lang.*", "java.text.*"
            ],
            "cpp": [
                "iostream", "vector", "string", "algorithm", "map", "set",
                "unordered_map", "unordered_set", "queue", "stack", "deque",
                "utility", "numeric", "cmath", "climits", "cfloat"
            ]
        }

    def _get_security_limits(self) -> SecurityLimits:
        """‚öôÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–≤–Ω—è"""
        if self.security_level == SecurityLevel.DEVELOPMENT:
            return SecurityLimits(
                max_file_size_kb=500,
                max_execution_time_s=30,
                max_memory_mb=512,
                max_output_size_kb=5120,
                max_files_count=50,
                max_processes=5,
                allowed_network=True,
                allowed_file_operations=True
            )
        elif self.security_level == SecurityLevel.TESTING:
            return SecurityLimits(
                max_file_size_kb=200,
                max_execution_time_s=10,
                max_memory_mb=256,
                max_output_size_kb=2048,
                max_files_count=20,
                max_processes=2,
                allowed_network=False,
                allowed_file_operations=False
            )
        else:  # PRODUCTION
            return SecurityLimits(
                max_file_size_kb=100,
                max_execution_time_s=5,
                max_memory_mb=128,
                max_output_size_kb=1024,
                max_files_count=10,
                max_processes=1,
                allowed_network=False,
                allowed_file_operations=False
            )

    def validate_code(self, code: str, language: str) -> Dict[str, Any]:
        """
        üîç –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            code: –ö–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            language: –Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
        """
        validation_result = {
            "is_safe": True,
            "violations": [],
            "warnings": [],
            "sanitized_code": code,
            "risk_level": "low"
        }
        
        # üìè –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–¥–∞
        code_size_kb = len(code.encode('utf-8')) / 1024
        if code_size_kb > self.limits.max_file_size_kb:
            validation_result["violations"].append(
                f"Code size ({code_size_kb:.1f}KB) exceeds limit ({self.limits.max_file_size_kb}KB)"
            )
            validation_result["is_safe"] = False
            validation_result["risk_level"] = "high"

        # üö´ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        language_patterns = self.forbidden_patterns.get(language.lower(), [])
        for pattern in language_patterns:
            if re.search(pattern, code, re.IGNORECASE | re.MULTILINE):
                violation = f"Forbidden pattern detected: {pattern}"
                validation_result["violations"].append(violation)
                validation_result["is_safe"] = False
                validation_result["risk_level"] = "high"

        # ‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        self._check_warnings(code, language, validation_result)
        
        # üßπ –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        if validation_result["is_safe"]:
            validation_result["sanitized_code"] = self._sanitize_code(code, language)

        return validation_result

    def _check_warnings(self, code: str, language: str, result: Dict[str, Any]):
        """‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã—Ö, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
        
        warning_patterns = {
            "python": [
                (r"range\s*\(\s*\d{4,}\s*\)", "Large range detected - may cause performance issues"),
                (r".*\*\*\s*\d{3,}", "Large exponentiation detected"),
                (r"recursion", "Recursion detected - watch for stack overflow"),
            ],
            "java": [
                (r"new\s+int\s*\[\s*\d{6,}\s*\]", "Large array allocation detected"),
                (r"Math\.pow\s*\(.*,\s*\d{3,}\s*\)", "Large exponentiation detected"),
            ],
            "cpp": [
                (r"new\s+\w+\s*\[\s*\d{6,}\s*\]", "Large array allocation detected"),
                (r"pow\s*\(.*,\s*\d{3,}\s*\)", "Large exponentiation detected"),
            ]
        }
        
        patterns = warning_patterns.get(language.lower(), [])
        for pattern, message in patterns:
            if re.search(pattern, code, re.IGNORECASE):
                result["warnings"].append(message)
                if result["risk_level"] == "low":
                    result["risk_level"] = "medium"

    def _sanitize_code(self, code: str, language: str) -> str:
        """üßπ –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ (–±–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞)"""
        
        # –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
        if language.lower() == "python":
            # –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º
            lines = code.split('\n')
            sanitized_lines = []
            for line in lines:
                if '#' in line and any(word in line.lower() for word in ['hack', 'exploit', 'malware']):
                    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
                    line = line.split('#')[0].rstrip()
                sanitized_lines.append(line)
            code = '\n'.join(sanitized_lines)
        
        return code

    def create_secure_environment(self, work_dir: Path) -> Dict[str, Any]:
        """
        üèóÔ∏è –°–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        
        Args:
            work_dir: –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            
        Returns:
            –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ä–µ–¥—ã
        """
        env_config = {
            "work_dir": str(work_dir),
            "environment_vars": {
                "HOME": str(work_dir),
                "TMPDIR": str(work_dir / "tmp"),
                "PATH": "/usr/local/bin:/usr/bin:/bin",  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π PATH
                "PYTHONDONTWRITEBYTECODE": "1",
                "PYTHONUNBUFFERED": "1",
            },
            "resource_limits": {
                "cpu_time": self.limits.max_execution_time_s,
                "memory": self.limits.max_memory_mb * 1024 * 1024,
                "file_size": self.limits.max_output_size_kb * 1024,
                "open_files": 20,
                "processes": self.limits.max_processes,
            },
            "filesystem": {
                "read_only_paths": ["/usr", "/lib", "/lib64", "/bin", "/sbin"],
                "writable_paths": [str(work_dir)],
                "blocked_paths": ["/etc", "/var", "/home", "/root", "/proc", "/sys"],
            },
            "network": {
                "allowed": self.limits.allowed_network,
                "blocked_ports": [22, 23, 25, 53, 80, 443, 993, 995] if not self.limits.allowed_network else [],
            }
        }
        
        # –°–æ–∑–¥–∞—ë–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        self._setup_secure_directory(work_dir)
        
        return env_config

    def _setup_secure_directory(self, work_dir: Path):
        """üìÅ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        try:
            # –°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            work_dir.mkdir(parents=True, exist_ok=True)
            (work_dir / "tmp").mkdir(exist_ok=True)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å)
            os.chmod(work_dir, 0o700)
            os.chmod(work_dir / "tmp", 0o700)
            
        except Exception as e:
            print(f"Warning: Could not setup secure directory: {e}")

    def generate_execution_token(self, user_id: str, problem_slug: str) -> str:
        """
        üéüÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–¥–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            problem_slug: –°–ª–∞–≥ –∑–∞–¥–∞—á–∏
            
        Returns:
            –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        """
        timestamp = str(int(time.time()))
        data = f"{user_id}:{problem_slug}:{timestamp}"
        token = hashlib.sha256(data.encode()).hexdigest()[:16]
        return f"exec_{token}"

    def rate_limit_check(self, user_id: str, max_requests: int = 10, window_minutes: int = 1) -> Dict[str, Any]:
        """
        üö¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            max_requests: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            window_minutes: –û–∫–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        """
        # –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è in-memory rate limiting
        # –í production —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis –∏–ª–∏ –ø–æ–¥–æ–±–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        
        current_time = time.time()
        window_seconds = window_minutes * 60
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not hasattr(self, '_rate_limit_storage'):
            self._rate_limit_storage = {}
        
        user_requests = self._rate_limit_storage.get(user_id, [])
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        user_requests = [req_time for req_time in user_requests 
                        if current_time - req_time < window_seconds]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_requests) >= max_requests:
            return {
                "allowed": False,
                "requests_count": len(user_requests),
                "max_requests": max_requests,
                "window_minutes": window_minutes,
                "reset_time": min(user_requests) + window_seconds
            }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        user_requests.append(current_time)
        self._rate_limit_storage[user_id] = user_requests
        
        return {
            "allowed": True,
            "requests_count": len(user_requests),
            "max_requests": max_requests,
            "window_minutes": window_minutes,
            "remaining_requests": max_requests - len(user_requests)
        }

    def audit_log(self, event_type: str, user_id: str, details: Dict[str, Any]):
        """
        üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        
        Args:
            event_type: –¢–∏–ø —Å–æ–±—ã—Ç–∏—è
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            details: –î–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
        """
        log_entry = {
            "timestamp": time.time(),
            "event_type": event_type,
            "user_id": user_id,
            "security_level": self.security_level.value,
            "details": details
        }
        
        # –í production —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        print(f"üîí SECURITY AUDIT: {json.dumps(log_entry, indent=2)}")


# üåü –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
def get_security_validator(security_level: SecurityLevel = None) -> CodeSecurityValidator:
    """–ü–æ–ª—É—á–∏—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if security_level is None:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_level = os.getenv("SECURITY_LEVEL", "production").lower()
        try:
            security_level = SecurityLevel(env_level)
        except ValueError:
            security_level = SecurityLevel.PRODUCTION
    
    return CodeSecurityValidator(security_level)


# üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    validator = get_security_validator(SecurityLevel.PRODUCTION)
    
    # –¢–µ—Å—Ç 1: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–æ–¥
    safe_code = """
def two_sum(nums, target):
    hash_map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in hash_map:
            return [hash_map[complement], i]
        hash_map[num] = i
    return []
"""
    
    result = validator.validate_code(safe_code, "python")
    print("üü¢ Safe code validation:", result["is_safe"])
    
    # –¢–µ—Å—Ç 2: –û–ø–∞—Å–Ω—ã–π –∫–æ–¥
    dangerous_code = """
import os
import subprocess
os.system("rm -rf /")
subprocess.call(["ls", "/etc/passwd"])
"""
    
    result = validator.validate_code(dangerous_code, "python")
    print("üî¥ Dangerous code validation:", result["is_safe"])
    print("Violations:", result["violations"])
    
    print("‚úÖ Security module tests completed!") 